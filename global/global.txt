JavaScript is a versatile, high-level  interpreted programming language that uses Just-In-Time (JIT) compilation. It is dynamically typed and primarily used for web development


// ***********************************************************************************
An interpreter in programming languages is a tool that directly executes instructions written in a scripting or programming language without requiring them to be compiled into a machine language program first. 
It reads and executes the source code line by line, translating it into machine code on-the-fly.
// ***********************************************************************************


// ***********************************************************************************
JIT (Just-In-Time) compilation is a way of making computer programs run faster.
 It works by turning the parts of the program that are used a lot into a special language that the computer understands really well, but it only does this when it's needed, not before. This helps the program work more quickly and smoothly.
// ***********************************************************************************


 // ************************************************************************************
Interpreter: Each time you cook a dish, you read the recipe from the book. This is like the interpreter, which reads and runs the code every time you want it to do something.
JIT Compilation: Now, suppose you love a particular recipe and cook it very often. You decide to memorize this recipe. The next time you cook it, you don't need to read from the book; you just do it from memory. This is like JIT compilation. It remembers parts of the code that are used a lot and makes them run faster, so you don't have to "read the recipe" every time.
// ************************************************************************************

 // ************************************************************************************
Scripting language, like JavaScript, is a special type of computer language used to make web pages more interesting and interactive. It's like a set of instructions that web browsers understand. It can make things happen on a webpage, like animations or responding to your clicks.
 // ************************************************************************************


// Java vs Js
| Aspect                   | Java                                    | JavaScript                             |
|--------------------------|-----------------------------------------|----------------------------------------|
| Type of Language         | Compiled                                | Interpreted (Scripting Language)       |
| Primary Use Cases        | Desktop Applications, Mobile Apps (Android), Server-side Applications, Enterprise Software | Web Development (Client-side scripting) |
| Execution Environment    | Runs on Java Virtual Machine (JVM), platform-independent | Runs in web browsers, platform-dependent (user's browser) |
| Syntax                   | Strict, requires data type declarations  | Flexible, loosely typed language       |
| Common Usage             | Server-side logic, Android app development, standalone applications | Client-side scripting for web pages, making web content interactive |
| Libraries/Frameworks     | Spring, JavaEE, Android SDK, etc.        | React, Angular, Node.js, etc.          |




// Setting up Environment js 

Embedding JavaScript in HTML refers to the process of including JavaScript code within an HTML document to enable dynamic behavior and interactivity on a web page. 
This allows developers to control the behavior of web elements, respond to user interactions, and manipulate the content of the page.


Scope in JavaScript is like deciding who can see and use certain information (like variables or functions) in different parts of your code. It's like having different levels of secrecy or access in an office building:

1. **Global Scope**: Imagine the lobby of an office building. Anything (like a variable) you put in the lobby is in the global scope. Everyone in the building can see and use it. In JavaScript, a global variable is one that's declared outside of any function or block. It can be accessed from anywhere in your code.

2. **Function Scope**: Now, think of a private office in the building. Stuff (variables and functions) inside this office is in the function scope. Only people (code) inside this office can see and use it. In JavaScript, if you declare a variable inside a function, it can only be accessed within that function, not outside of it.

3. **Block Scope (ES6)**: Imagine a meeting room for a small team. This is like block scope, introduced in ES6 with the `let` and `const` keywords. Variables declared inside a block (like within `{}` braces) are like things in this meeting room; they can only be accessed within that specific block.

4. **Lexical Scope**: Think of it as a rule that says you can look outside your current room (or block of code), but not inside another room. So, a function inside another function can access variables of the parent function, but not the other way around.

In simple terms, scope in JavaScript controls the visibility and lifetime of variables and functions. It's like having different access levels in a building, determining who can see or use what. Understanding scope helps you manage your data well and avoid conflicts or unexpected behavior in your code.

// what is variable 

A variable in JavaScript is like a storage box where you can keep information (like numbers, text, or more complex stuff) so you can use it later in your program. It's a way to label data with a descriptive name, so your code is easier to read and manage.

//what is var
The var keyword in JavaScript is used to declare a variable. Here are its key characteristics and uses:
Function Scope: Variables declared with var are function-scoped, meaning they are only accessible within the function they are declared in, or globally if declared outside of a function. This is in contrast to let and const, which are block-scoped.

Hoisting: Variables declared with var are hoisted to the top of their scope. This means that they can be referenced before they are actually declared in the code. However, only the declaration is hoisted, not the initialization. For example:

// what is data types 
JavaScript has several data types that are used to represent different kinds of information. Here are the main ones with real-world examples:

1. **String**
   - Description: Textual data; a sequence of characters.
   - Example: A name.
     ```javascript
     let personName = "Alice";
     ```
   - Real-World Analogy: A name tag. Just as a name tag has a name written on it, a string variable holds text.

2. **Number**
   - Description: Numeric data; both integers and floating-point numbers.
   - Example: Age, temperature.
     ```javascript
     let age = 30;
     let temperature = 36.6;
     ```
   - Real-World Analogy: The numbers on a measuring tape. Just as the tape measures length in numbers, a number variable holds numeric values.

3. **Boolean**
   - Description: Logical data type that can only be true or false.
   - Example: Light switch (on/off).
     ```javascript
     let isLightOn = true;
     ```
   - Real-World Analogy: A light switch. It can only be in one of two states: on or off, just like a boolean can only be true or false.

4. **Undefined**
   - Description: A variable that has been declared but not assigned a value.
   - Example: An unassigned seat in a theater.
     ```javascript
     let seat;
     ```
   - Real-World Analogy: An empty seat. Just as a seat can be unassigned, a variable can be declared but not have a value, making it undefined.

5. **Null**
   - Description: Represents the intentional absence of any object value.
   - Example: A deliberately empty mailbox.
     ```javascript
     let mailbox = null;
     ```
   - Real-World Analogy: An empty mailbox deliberately kept empty, signifying no mail is present.

6. **Object**
   - Description: Complex data structures that can contain multiple values.
   - Example: A person's profile.
     ```javascript
     let person = { name: "Alice", age: 30 };
     ```
   - Real-World Analogy: A file folder. Just like a folder can contain various pieces of information, an object in JavaScript can hold multiple related data pieces.

7. **Array**
   - Description: A list of items, which can be of any data type.
   - Example: A shopping list.
     ```javascript
     let shoppingList = ["milk", "bread", "eggs"];
     ```
   - Real-World Analogy: A grocery list. Just like a list containing various items, an array in JavaScript can store a list of values.

These data types form the building blocks of JavaScript programming, allowing you to represent and manipulate a wide range of information in your code.



// Hositing in js 
Hoisting in JavaScript is like automatically moving all the declarations of 
variables and functions to the top of their scope before the code starts running. 

//1
console.log(myName); // Output: undefined
var myName = "Alice";
console.log(myName); // Output: "Alice"


//2
greet(); // Output: "Hello!"
function greet() {
  console.log("Hello!");
}

//3
function showNumber() {
    console.log(number); // Output: undefined
    var number = 10;
    console.log(number); // Output: 10secrecy
}
  
showNumber();

// Temporal DEADZONE
The Temporal Dead Zone (TDZ) in JavaScript is a term used to describe the state where variables declared with let and const are in a scope but are not yet initialized and cannot be accessed. This period starts from the beginning of the block in which the variable is declared and ends at the point where the variable is initialized.